条款1：视c++为一个语言联邦
次语言：
1. C
2. Object-Oriented C++，面向对象，C with Classes
3. Template C++ ，泛型编程
4. STL， template程序块

条款2：尽量以const,enum,inline替换#define
“宁可以编译器替换预处理器”
1.对于单纯常量，最好以const对象或enums替换#define(宏的问题，报错不准确，容易报对应常量的错，难以debug；#define不重视作用域，没有封装性，不能定义class等)
2.对于形似函数的宏，最好改用inline函数体寒#define（宏的问题，实参小括号严格，前置递增敏感）

条款3： 尽可能使用const
#降低不正当操作的错误
#常函数() cosnt，不能修改成员的值，除非成员设置为 mutable(可变的)
#non-const版本 调用 const版本(可以避免代码重复)避免递归调用自己，二次转型
static_cast<const T&>(*this) 安全转型，非常量转成常量，增加const
const_cast<char&>(...) 移除const

条款4：确定对象被使用前已经初始化
#类内构造函数初始化：A::A(int &x): a(x) {} (成员初值列,相比与赋值版本，类内声明构造函数，类外赋值，赋值版本成员对象首先设初值，然后再赋予新值，default构造函数的一切浪费了)
#构造函数：C++用于构建类的新对象时需要调用的函数，该函数无返回类型！（注意：是“无”！ 不是空！(void)）。
#默认构造函数：未提供显式初始值时，用来创建对象的构造函数。（就是给个默认值呗）